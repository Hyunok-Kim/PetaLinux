#!/usr/bin/env python3

# Copyright (C) 2021-2022, Xilinx, Inc.  All rights reserved.
# Copyright (C) 2022-2023, Advanced Micro Devices, Inc.  All rights reserved.
#
# Author:
#       Raju Kumar Pothuraju <rajukumar.pothuraju@amd.com>
#
# SPDX-License-Identifier: MIT

import argparse
import logging
import os
import sys

scripts_path = os.path.dirname(os.path.realpath(__file__))
libs_path = scripts_path + '/libs'
sys.path = sys.path + [libs_path]
import config_component
import examples
import logger_setup
import plnx_utils
import plnx_vars

logger, console_h = logger_setup.setup_logger('PetaLinux')


def _config(args, proot):
    '''Run config setup for given component'''
    gen_confargs = ''
    config_target = 'silentconfig'
    if not args.silentconfig:
        if args.component in ['project', 'rootfs']:
            gen_confargs = '--menuconfig %s' % args.component
        config_target = 'config'
    if args.debug:
        gen_confargs += ' --debug'
    plnx_utils.update_config_value('VALIDATE_HW_CHKSUM', '1',
                                   plnx_vars.MetaDataFile.format(proot))
    if args.get_hw_description:
        config_component.validate_hw_file(args, proot)
    plnx_utils.setup_plnwrapper(args, proot, config_target, gen_confargs)
    config_component.config_yocto_component(
        proot, args.component, config_target, args.logfile)
    logger.info('Successfully configured %s' % args.component)


def main():
    parser = argparse.ArgumentParser(
        description='Configures the project or the specified component with menuconfig',
        formatter_class=argparse.RawTextHelpFormatter,
        usage='Use %(prog)s [options] {--component <COMPONENT> |--get-hw-description[=SRC]}',
        epilog=examples.PConfig)

    # Global args
    parser.add_argument('-D', '--debug', action='store_true',
                        help='Display the Debug prints')
    parser.add_argument('-p', '--project', metavar='PROJECT_DIR', type=os.path.realpath,
                        help='Specify full path to a PetaLinux project.'
                             '\nDefault is the working project.')
    parser.add_argument('-c', '--component', metavar='RECIPE_NAME', default='project',
                        help='Specify the component If no component is specified, '
                        '\nit will do top level project configuration.'
                        '\nIf you specify a component, it will configure it '
                        '\nwith menuconfig and saves user\'s config fragments in meta-user.'
                        '\nE.g. -c rootfs, -c busybox')
    parser.add_argument('--silentconfig', action='store_true',
                        help='Takes the default configuration and skips the GUI.')
    parser.add_argument('--get-hw-description', metavar='HW_FILE', type=os.path.realpath,
                        help='Get hardware description file/path.')
    parser.set_defaults(func=_config)

    args = parser.parse_args()

    # Exit if PROOT is not PetaLinux project
    proot = plnx_utils.exit_not_plnx_project(args.project)

    # Exit if PetaLinux version mismatch
    if not plnx_utils.petalinux_version_check(proot):
        sys.exit(255)

    args.command = os.path.basename(sys.argv[0])
    args.builddir = plnx_vars.BuildDir.format(proot)
    plnx_utils.CreateDir(args.builddir)

    plnx_utils.CreateDir(plnx_vars.PlnxWorkspace.format(proot))

    args.logfile = plnx_vars.ConfigLogFile.format(proot)
    plnx_utils.RenameFile(args.logfile, args.logfile + '.old')

    # Setup logger to file
    logger_setup.setup_logger_file(args.logfile)
    # Print debug prints if debug selected
    if args.debug:
        console_h.setLevel(logging.DEBUG)

    ret = args.func(args, proot)
    return ret


if __name__ == "__main__":
    try:
        ret = main()
    except Exception:
        ret = 1
        import traceback
        traceback.print_exc()
    sys.exit(ret)
